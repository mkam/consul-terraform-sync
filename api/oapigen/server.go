// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

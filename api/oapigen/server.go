// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Triggers a dryrun for a provided task
	// (POST /v1/dryrun_tasks)
	CreateDryRunTask(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateDryRunTask operation middleware
func (siw *ServerInterfaceWrapper) CreateDryRunTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDryRunTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/dryrun_tasks", wrapper.CreateDryRunTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

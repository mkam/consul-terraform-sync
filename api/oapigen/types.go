// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"encoding/json"
	"fmt"
)

// CatalogServicesCondition defines model for CatalogServicesCondition.
type CatalogServicesCondition struct {
	Datacenter        *string                            `json:"datacenter,omitempty"`
	Namespace         *string                            `json:"namespace,omitempty"`
	NodeMeta          *CatalogServicesCondition_NodeMeta `json:"node_meta,omitempty"`
	Regexp            *string                            `json:"regexp,omitempty"`
	SourceIncludesVar *bool                              `json:"source_includes_var,omitempty"`
}

// CatalogServicesCondition_NodeMeta defines model for CatalogServicesCondition.NodeMeta.
type CatalogServicesCondition_NodeMeta struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ConsulKVCondition defines model for ConsulKVCondition.
type ConsulKVCondition struct {
	Datacenter        *string `json:"datacenter,omitempty"`
	Namespace         *string `json:"namespace,omitempty"`
	Path              string  `json:"path"`
	Recurse           *bool   `json:"recurse,omitempty"`
	SourceIncludesVar *bool   `json:"source_includes_var,omitempty"`
}

// ConsulKVSourceInput defines model for ConsulKVSourceInput.
type ConsulKVSourceInput struct {
	Datacenter *string `json:"datacenter,omitempty"`
	Namespace  *string `json:"namespace,omitempty"`
	Path       string  `json:"path"`
	Recurse    *bool   `json:"recurse,omitempty"`
}

// DryrunRequest defines model for DryrunRequest.
type DryrunRequest TaskRequest

// DryrunResponse defines model for DryrunResponse.
type DryrunResponse TaskResponse

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error     Error     `json:"error"`
	RequestId RequestID `json:"request_id"`
}

// RequestID defines model for RequestID.
type RequestID string

// Run defines model for Run.
type Run struct {
	ChangesPresent *bool   `json:"changes_present,omitempty"`
	Plan           *string `json:"plan,omitempty"`
	Status         *string `json:"status,omitempty"`
}

// ScheduleCondition defines model for ScheduleCondition.
type ScheduleCondition struct {
	Cron string `json:"cron"`
}

// ServicesCondition defines model for ServicesCondition.
type ServicesCondition struct {
	Regexp *string `json:"regexp,omitempty"`
}

// ServicesSourceInput defines model for ServicesSourceInput.
type ServicesSourceInput struct {
	Regexp *string `json:"regexp,omitempty"`
}

// Task defines model for Task.
type Task struct {
	BufferPeriod *struct {
		Enabled *bool   `json:"enabled,omitempty"`
		Max     *string `json:"max,omitempty"`
		Min     *string `json:"min,omitempty"`
	} `json:"buffer_period,omitempty"`
	Condition *struct {
		CatalogServices *CatalogServicesCondition `json:"catalog-services,omitempty"`
		ConsulKv        *ConsulKVCondition        `json:"consul-kv,omitempty"`
		Schedule        *ScheduleCondition        `json:"schedule,omitempty"`
		Services        *ServicesCondition        `json:"services,omitempty"`
	} `json:"condition,omitempty"`
	Description *string   `json:"description,omitempty"`
	Enabled     *bool     `json:"enabled,omitempty"`
	Name        string    `json:"name"`
	Providers   *[]string `json:"providers,omitempty"`
	Services    *[]string `json:"services,omitempty"`
	Source      string    `json:"source"`
	SourceInput *struct {
		ConsulKv *ConsulKVSourceInput `json:"consul-kv,omitempty"`
		Services *ServicesSourceInput `json:"services,omitempty"`
	} `json:"source_input,omitempty"`
	Variables  *Task_Variables `json:"variables,omitempty"`
	Version    *string         `json:"version,omitempty"`
	WorkingDir *string         `json:"working_dir,omitempty"`
}

// Task_Variables defines model for Task.Variables.
type Task_Variables struct {
	AdditionalProperties map[string]string `json:"-"`
}

// TaskDeleteResponse defines model for TaskDeleteResponse.
type TaskDeleteResponse struct {
	RequestId RequestID `json:"request_id"`
}

// TaskRequest defines model for TaskRequest.
type TaskRequest Task

// TaskResponse defines model for TaskResponse.
type TaskResponse struct {
	RequestId RequestID `json:"request_id"`
	Run       *Run      `json:"run,omitempty"`
	Task      *Task     `json:"task,omitempty"`
}

// ExecuteTaskDryrunJSONBody defines parameters for ExecuteTaskDryrun.
type ExecuteTaskDryrunJSONBody DryrunRequest

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody TaskRequest

// CreateTaskParams defines parameters for CreateTask.
type CreateTaskParams struct {
	// Different modes for running. Supports run now which runs the task immediately
	Run *CreateTaskParamsRun `json:"run,omitempty"`
}

// CreateTaskParamsRun defines parameters for CreateTask.
type CreateTaskParamsRun string

// ExecuteTaskDryrunJSONRequestBody defines body for ExecuteTaskDryrun for application/json ContentType.
type ExecuteTaskDryrunJSONRequestBody ExecuteTaskDryrunJSONBody

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// Getter for additional properties for CatalogServicesCondition_NodeMeta. Returns the specified
// element and whether it was found
func (a CatalogServicesCondition_NodeMeta) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CatalogServicesCondition_NodeMeta
func (a *CatalogServicesCondition_NodeMeta) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CatalogServicesCondition_NodeMeta to handle AdditionalProperties
func (a *CatalogServicesCondition_NodeMeta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CatalogServicesCondition_NodeMeta to handle AdditionalProperties
func (a CatalogServicesCondition_NodeMeta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Task_Variables. Returns the specified
// element and whether it was found
func (a Task_Variables) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Task_Variables
func (a *Task_Variables) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Task_Variables to handle AdditionalProperties
func (a *Task_Variables) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Task_Variables to handle AdditionalProperties
func (a Task_Variables) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
